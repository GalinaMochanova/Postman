{
	"info": {
		"_postman_id": "9faab4d8-2aa8-4d31-9905-0cf5a57b9d03",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(respData.name).to.eql(\"Frodo\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(respData.age).to.eql(\"33\")\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"Check salary\",function() {\r",
							"    pm.expect(respData.salary).to.eql(800)\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"let reqData = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check salary from request\",function() {\r",
							"    pm.expect(respData.salary).to.eql(parseInt(reqData.salary))\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(respData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year\",function() {\r",
							"    pm.expect(respData.family.u_salary_1_5_year).to.eql(reqData.salary*4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Frodo",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "800",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function () {\r",
							"      pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Check age\", function () {\r",
							"      pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check salary\", function () {\r",
							"      pm.expect(respData.salary).to.eql(parseInt(reqData.salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log (respData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Dog has property Name\", function () {\r",
							"      pm.expect(respData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog has property Age\", function () {\r",
							"      pm.expect(respData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"DogNameLuky\", function () {\r",
							"      pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"DogAge4\", function () {\r",
							"      pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=bilbo&age=111&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "bilbo"
						},
						{
							"key": "age",
							"value": "111"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\"), function() {\r",
							"    pm.expect(respData.name).to.eql(reqData.name)\r",
							"};\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Check age\"), function() {\r",
							"    pm.expect(respData.age).to.eql(reqData.age)\r",
							"};\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log(reqData.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log(respData.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(respData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(respData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(respData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check salary[0]\"), function() {\r",
							"    pm.expect(respData.salary[0]).to.eql(reqData.salary)\r",
							"};\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check salary[1]\"), function() {\r",
							"    pm.expect(respData.salary[1]).to.eql(2*reqData.salary)\r",
							"};\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Check salary[2]\"), function() {\r",
							"    pm.expect(respData.salary[1]).to.eql(3*reqData.salary)\r",
							"};\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"bilbo\");\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"38\");\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"800\");\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (let i in respData.salary) {console.log("salary[" + i + "]" + " = " + respData.salary[i]);\r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=sam&age=38&salary=800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "sam"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let reqData = request.data; \r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('Json response has property \"start_qa_salary\"',function() {\r",
							"    pm.expect(respData).to.have.property('start_qa_salary')\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('Json response has property \"qa_salary_after_6_months\"',function() {\r",
							"    pm.expect(respData).to.have.property('qa_salary_after_6_months')\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('Json response has property \"qa_salary_after_12_months\"',function() {\r",
							"    pm.expect(respData).to.have.property('qa_salary_after_12_months')\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('Json response has property \"qa_salary_after_1.5_year\"',function() {\r",
							"    pm.expect(respData).to.have.property('qa_salary_after_1.5_year')\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('Json response has property \"qa_salary_after_3.5_years\"',function() {\r",
							"    pm.expect(respData).to.have.property('qa_salary_after_3.5_years')\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test('Json response has property \"person\"',function() {\r",
							"    pm.expect(respData).to.have.property('person')\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test('Check value \"start_qa_salary\"', function() {\r",
							"    pm.expect(respData.start_qa_salary).to.eql(parseInt(reqData.salary))\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test('Check value \"qa_salary_after_6_months\"', function() {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(reqData.salary*2)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test('Check value \"qa_salary_after_12_months\"', function() {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(reqData.salary*2.7)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test('Check value \"qa_salary_after_1.5_year\"', function() {\r",
							"    pm.expect(respData['qa_salary_after_1.5_year']).to.eql(reqData.salary*3.3)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test('Check value \"qa_salary_after_3.5_years\"', function() {\r",
							"    pm.expect(respData['qa_salary_after_3.5_years']).to.eql(reqData.salary*3.8)\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test('Check value \"person.u_name[1]\"', function() {\r",
							"    pm.expect(respData.person.u_name[1]).to.eql(parseInt(reqData.salary))\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test('Check value \"u_age\"', function() {\r",
							"    pm.expect(respData.person.u_age).to.eql(parseInt(reqData.age))\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test('Check value \"u_salary_5_years\"', function() {\r",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(reqData.salary*4.2)\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let key in respData.person) {\r",
							"    console.log(key);\r",
							"    console.log(respData.person[key])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}
